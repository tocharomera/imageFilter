<!DOCTYPE html>
<html dir="ltr" itemscope="" itemtype="http://schema.org/Article" style="" class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths adownload webaudio no-battery blobconstructor contenteditable cors csscalc cssfilters mediaqueries no-regions classlist datalistelem details texttrackapi track filereader no-filesystem fullscreen getusermedia gamepads xhr2 no-quotamanagement performance raf no-stylescoped websocketsbinary no-webintents todataurljpeg no-todataurlwebp no-webp" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta property="twitter:account_id" content="1593210261">
  <!-- Copyright (c) 2012 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * Author: Ilmari Heikkinen <ilmari@google.com>
   *
   * 
   *
  -->
  <title>Making Image Filters with Canvas - HTML5 Rocks</title>
  <meta name="description" content="A quick guide to writing custom image filters with &amp;lt;canvas&amp;gt;.">
  <meta name="keywords" content="html5,html 5,html5 demos,html5 examples,javascript,css3,notifications,geolocation,web workers,apppcache,file api,filereader,indexeddb,offline,audio,video,drag and drop,chrome,sse,mobile">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
  <meta name="theme-color" content="#f04530">
  <link rel="shortcut icon" href="https://www.html5rocks.com/favicon.ico">
  <link rel="alternate" type="application/rss+xml" title="HTML5 Rocks RSS" href="http://feeds.feedburner.com/html5rocks">
  <meta name="google-site-verification" content="E1HOIDkksrWY5npenL8FeQhKn4Ujctd75iO2lfufSyA">
  <meta itemprop="name" content="Image Filters with Canvas - HTML5 Rocks">
  <meta itemprop="description" content="A quick guide to writing custom image filters with &amp;lt;canvas&amp;gt;.">
  
  <meta itemprop="image" content="https://www.html5rocks.com/static/images/html5rocks-logo-wings.png">
  

  
    
  <link rel="canonical" href="https://www.html5rocks.com/tutorials/canvas/imagefilters/">  
    
  

  
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@ChromiumDev">
  <meta name="twitter:creator" content="@ilmarihei">

  <meta property="og:type" content="article">
  <meta property="og:title" content="Image Filters with Canvas - HTML5 Rocks">
  <meta property="og:url" content="https://www.html5rocks.com/en/tutorials/canvas/imagefilters/">
  <meta property="og:description" content="A quick guide to writing custom image filters with &amp;lt;canvas&amp;gt;.">
  <meta property="og:image" content="https://www.html5rocks.com/static/images/profiles/ilmari.png">
  <meta property="og:site_name" content="HTML5 Rocks - A resource for open web HTML5 developers">
  

  
  <link rel="author" href="https://www.google.com/profiles/115293744081058969329">
  
  
  <link rel="publisher" href="https://plus.google.com/+GoogleChromeDevelopers">

  

  
    
    <link rel="stylesheet" media="all" href="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/v2-combined.css">
    

    
  

  <link href="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/css.css" rel="stylesheet">

  <link rel="apple-touch-icon" href="https://www.html5rocks.com/static/images/identity/HTML5_Badge_64.png">
  <link rel="apple-touch-icon-precomposed" href="https://www.html5rocks.com/static/images/identity/HTML5_Badge_64.png">

  <script type="text/javascript" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/count.js" async=""></script><script async="" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/gtm.js"></script><script async="" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/analytics.js"></script><script async="" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/gtm.js"></script><script src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/modernizr.js"></script>

  <!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5-els.js"></script>
  <![endif]-->

  
<style type="text/css">
  #customMatrix input {
    text-align: center;
  }
</style>

<script src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/count-data.js"></script></head>
<body data-href="tutorials-canvas-imagefilters" onload="" class="article tutorial">

  <header class="main" id="siteheader">
    <h1 id="title">
      <a href="https://www.html5rocks.com/en/" title="HTML5 Rocks">HTML5 Rocks</a>
    </h1>
    <a href="#sitenav" id="navtoggle">Show navigation</a>

    
    <a id="toctoggle" href="#toc">Table of Contents</a>
    

    <nav id="sitenav">
      <ul>
        
        <li id="home_menu"><a href="https://www.html5rocks.com/en/" class="home">Home</a></li>
        
        <li id="tutorials_menu"><a href="https://www.html5rocks.com/en/tutorials/?page=1" class="tutorials">Tutorials</a></li>
        <li id="updates_menu"><a href="https://developers.google.com/web/updates/" class="updates">Updates</a></li>
      </ul>
    </nav>

    
    <nav class="toc" id="toc">
      <h1>Table of Contents</h1>

      <ul><li><a href="#toc-introduction">Introduction</a></li><li><a href="#toc-setup">Processing pixels</a></li><li><a href="#toc-simplefilters">Running simple filters</a></li><li><a href="#toc-convolution">Convolving images</a></li><li><a href="#toc-conclusion">Conclusion</a></li></ul>

      <h1 class="visible-title">Localizations:</h1>
      <ul>
        
          <li><a href="https://github.com/html5rocks/www.html5rocks.com/blob/master/CONTRIBUTING.md">Contribute one</a></li>
        
      </ul>
    </nav>
    
  </header>

  <div class="body-content">
    

  <section class="title">

    

    <section class="title-text container">
      
      <h1>Image Filters with Canvas</h1>
      
      

      <a href="https://www.html5rocks.com/en/" class="watermark">HTML5 Rocks</a>
    </section>
  </section>

  <article class="content-wrapper">

    <section class="container">

      

      <div class="article-meta sticky" id="article-meta" style="top: 22px;">
        <nav class="toc">
          <h1>Table of Contents</h1>

          <ul><li><a href="#toc-introduction">Introduction</a></li><li><a href="#toc-setup">Processing pixels</a></li><li><a href="#toc-simplefilters">Running simple filters</a></li><li><a href="#toc-convolution">Convolving images</a></li><li><a href="#toc-conclusion">Conclusion</a></li></ul>
        </nav>

        <aside class="localizations">
          <h1>Localizations</h1>
          <ul>
            
              <li><a href="https://github.com/html5rocks/www.html5rocks.com/blob/master/CONTRIBUTING.md">Contribute one</a></li>
            
          </ul>
        </aside>
      </div>
      

      <div class="content" id="article-content">

        <section class="byline">

          <div class="byline-content">
            
            <section class="author-images">
              <a href="https://www.html5rocks.com/profiles/#ilmari">
                <img src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/ilmari.png" itemprop="photo" alt="Ilmari Heikkinen" title="Ilmari Heikkinen">
              </a>

              
            </section>

            <section class="meta">
              <div class="authors">
                <strong>By</strong> <a href="https://www.html5rocks.com/profiles/#ilmari">Ilmari Heikkinen</a>
                
              </div>

              

              <div class="date">
                <time pubdate=""><strong>Published:</strong> May 25th, 2011</time>
                
                <span><strong>Comments:</strong> <a href="#disqus_thread" class="load-comments" data-disqus-identifier="https://www.html5rocks.com/tutorials/canvas/imagefilters/">4</a></span>
              </div>

              <div id="notcompatible" class="hidden">
                Your browser may not support the functionality in this article.
              </div>
            </section>
            <div class="clear"></div>

            
          </div>
        </section>

        
  <section>
    <h2 id="toc-introduction">Introduction</h2>
    <p>
      The HTML5 canvas element can be used to write image filters. What you
      need to do is draw an image onto a canvas, read back the canvas pixels,
      and run your filter on them. You can then write the result onto a new
      canvas (or heck, just reuse the old one.)
    </p>
    <p>
      Sounds simple? Good. Let's get cracking!
    </p>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" width="600" height="337">
      <figcaption>The original test image</figcaption>
    </figure>

  </section>
  <section>

    <h2 id="toc-setup">Processing pixels</h2>

    <p>
      First, retrieve the image pixels:
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span><span class="pln">
</span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">getPixels </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">img</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">getCanvas</span><span class="pun">(</span><span class="pln">img</span><span class="pun">.</span><span class="pln">width</span><span class="pun">,</span><span class="pln"> img</span><span class="pun">.</span><span class="pln">height</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> ctx </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">(</span><span class="str">'2d'</span><span class="pun">);</span><span class="pln">
  ctx</span><span class="pun">.</span><span class="pln">drawImage</span><span class="pun">(</span><span class="pln">img</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> ctx</span><span class="pun">.</span><span class="pln">getImageData</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="lit">0</span><span class="pun">,</span><span class="pln">c</span><span class="pun">.</span><span class="pln">width</span><span class="pun">,</span><span class="pln">c</span><span class="pun">.</span><span class="pln">height</span><span class="pun">);</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">getCanvas </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln">h</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">'canvas'</span><span class="pun">);</span><span class="pln">
  c</span><span class="pun">.</span><span class="pln">width </span><span class="pun">=</span><span class="pln"> w</span><span class="pun">;</span><span class="pln">
  c</span><span class="pun">.</span><span class="pln">height </span><span class="pun">=</span><span class="pln"> h</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></pre>
    <p>
      Next, we need a way to filter images. How about a <code>filterImage</code>
      method that takes a filter and an image and returns the filtered pixels?
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pun">.</span><span class="pln">filterImage </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">filter</span><span class="pun">,</span><span class="pln"> image</span><span class="pun">,</span><span class="pln"> var_args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> args </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">getPixels</span><span class="pun">(</span><span class="pln">image</span><span class="pun">)];</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln">arguments</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    args</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">arguments</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> filter</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">);</span><span class="pln">
</span><span class="pun">};</span></pre>

  </section>
  <section>

    <h2 id="toc-simplefilters">Running simple filters</h2>
    <p>
      Now that we have the pixel processing pipeline put together, it's time to
      write some simple filters. To start off, let's convert the image to grayscale.
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pun">.</span><span class="pln">grayscale </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">pixels</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">data</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln">d</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">+=</span><span class="lit">4</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> r </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> g </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">2</span><span class="pun">];</span><span class="pln">
    </span><span class="com">// CIE luminance for the RGB</span><span class="pln">
    </span><span class="com">// The human eye is bad at seeing red and blue, so we de-emphasize them.</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.2126</span><span class="pun">*</span><span class="pln">r </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0.7152</span><span class="pun">*</span><span class="pln">g </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0.0722</span><span class="pun">*</span><span class="pln">b</span><span class="pun">;</span><span class="pln">
    d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> v
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> pixels</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: none;" width="600" height="337"><canvas id="grayscale" width="600" height="337" style="display: inline;"></canvas>
      <button onclick="grayscale()">Restore original image</button>
    </figure>

    <p>
      Adjusting brightness can be done by adding a fixed value to the
      pixels:
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pun">.</span><span class="pln">brightness </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">pixels</span><span class="pun">,</span><span class="pln"> adjustment</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">data</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln">d</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">+=</span><span class="lit">4</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> adjustment</span><span class="pun">;</span><span class="pln">
    d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> adjustment</span><span class="pun">;</span><span class="pln">
    d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> adjustment</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> pixels</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" width="600" height="337"><canvas id="brightness" width="600" height="337" style="display: none;"></canvas>
      <button onclick="brightness()">Brighten the image</button>
    </figure>

    <p>
      Thresholding an image is also quite simple. You just compare the grayscale
      value of a  pixel to the threshold value and set the color based on that:
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pun">.</span><span class="pln">threshold </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">pixels</span><span class="pun">,</span><span class="pln"> threshold</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">data</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;</span><span class="pln">d</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">+=</span><span class="lit">4</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> r </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> g </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">2</span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="lit">0.2126</span><span class="pun">*</span><span class="pln">r </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0.7152</span><span class="pun">*</span><span class="pln">g </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0.0722</span><span class="pun">*</span><span class="pln">b </span><span class="pun">&gt;=</span><span class="pln"> threshold</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="lit">255</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> d</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> v
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> pixels</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: none;" width="600" height="337"><canvas id="threshold" width="600" height="337" style="display: inline;"></canvas>
      <button onclick="threshold()">Restore original image</button>
    </figure>

  </section>
  <section>

    <h2 id="toc-convolution">Convolving images</h2>
    <p>
      <a href="http://en.wikipedia.org/wiki/Convolution">Convolution filters</a> are very useful generic filters for image processing.
      The basic idea is that you take the weighed sum of a
      rectangle of pixels from the source image and use that as the output value.
      Convolution filters can be used for blurring, sharpening, embossing,
      edge detection and a whole bunch of other things.
    </p>
<pre class="prettyprint collapsible"><span class="typ">Filters</span><span class="pun">.</span><span class="pln">tmpCanvas </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">createElement</span><span class="pun">(</span><span class="str">'canvas'</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">tmpCtx </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">tmpCanvas</span><span class="pun">.</span><span class="pln">getContext</span><span class="pun">(</span><span class="str">'2d'</span><span class="pun">);</span><span class="pln">

</span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">createImageData </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln">h</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">tmpCtx</span><span class="pun">.</span><span class="pln">createImageData</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln">h</span><span class="pun">);</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">convolute </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">pixels</span><span class="pun">,</span><span class="pln"> weights</span><span class="pun">,</span><span class="pln"> opaque</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> side </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">round</span><span class="pun">(</span><span class="typ">Math</span><span class="pun">.</span><span class="pln">sqrt</span><span class="pun">(</span><span class="pln">weights</span><span class="pun">.</span><span class="pln">length</span><span class="pun">));</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> halfSide </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="pln">floor</span><span class="pun">(</span><span class="pln">side</span><span class="pun">/</span><span class="lit">2</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> src </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">data</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> sw </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">width</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> sh </span><span class="pun">=</span><span class="pln"> pixels</span><span class="pun">.</span><span class="pln">height</span><span class="pun">;</span><span class="pln">
  </span><span class="com">// pad output by the convolution matrix</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> w </span><span class="pun">=</span><span class="pln"> sw</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> h </span><span class="pun">=</span><span class="pln"> sh</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> output </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Filters</span><span class="pun">.</span><span class="pln">createImageData</span><span class="pun">(</span><span class="pln">w</span><span class="pun">,</span><span class="pln"> h</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> dst </span><span class="pun">=</span><span class="pln"> output</span><span class="pun">.</span><span class="pln">data</span><span class="pun">;</span><span class="pln">
  </span><span class="com">// go through the destination image pixels</span><span class="pln">
  </span><span class="kwd">var</span><span class="pln"> alphaFac </span><span class="pun">=</span><span class="pln"> opaque </span><span class="pun">?</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> y</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> y</span><span class="pun">&lt;</span><span class="pln">h</span><span class="pun">;</span><span class="pln"> y</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> x</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> x</span><span class="pun">&lt;</span><span class="pln">w</span><span class="pun">;</span><span class="pln"> x</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> sy </span><span class="pun">=</span><span class="pln"> y</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> sx </span><span class="pun">=</span><span class="pln"> x</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> dstOff </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">y</span><span class="pun">*</span><span class="pln">w</span><span class="pun">+</span><span class="pln">x</span><span class="pun">)*</span><span class="lit">4</span><span class="pun">;</span><span class="pln">
      </span><span class="com">// calculate the weighed sum of the source image pixels that</span><span class="pln">
      </span><span class="com">// fall under the convolution matrix</span><span class="pln">
      </span><span class="kwd">var</span><span class="pln"> r</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> g</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">=</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> cy</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> cy</span><span class="pun">&lt;</span><span class="pln">side</span><span class="pun">;</span><span class="pln"> cy</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> cx</span><span class="pun">=</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> cx</span><span class="pun">&lt;</span><span class="pln">side</span><span class="pun">;</span><span class="pln"> cx</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
          </span><span class="kwd">var</span><span class="pln"> scy </span><span class="pun">=</span><span class="pln"> sy </span><span class="pun">+</span><span class="pln"> cy </span><span class="pun">-</span><span class="pln"> halfSide</span><span class="pun">;</span><span class="pln">
          </span><span class="kwd">var</span><span class="pln"> scx </span><span class="pun">=</span><span class="pln"> sx </span><span class="pun">+</span><span class="pln"> cx </span><span class="pun">-</span><span class="pln"> halfSide</span><span class="pun">;</span><span class="pln">
          </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">scy </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> scy </span><span class="pun">&lt;</span><span class="pln"> sh </span><span class="pun">&amp;&amp;</span><span class="pln"> scx </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> scx </span><span class="pun">&lt;</span><span class="pln"> sw</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> srcOff </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">scy</span><span class="pun">*</span><span class="pln">sw</span><span class="pun">+</span><span class="pln">scx</span><span class="pun">)*</span><span class="lit">4</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> wt </span><span class="pun">=</span><span class="pln"> weights</span><span class="pun">[</span><span class="pln">cy</span><span class="pun">*</span><span class="pln">side</span><span class="pun">+</span><span class="pln">cx</span><span class="pun">];</span><span class="pln">
            r </span><span class="pun">+=</span><span class="pln"> src</span><span class="pun">[</span><span class="pln">srcOff</span><span class="pun">]</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> wt</span><span class="pun">;</span><span class="pln">
            g </span><span class="pun">+=</span><span class="pln"> src</span><span class="pun">[</span><span class="pln">srcOff</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> wt</span><span class="pun">;</span><span class="pln">
            b </span><span class="pun">+=</span><span class="pln"> src</span><span class="pun">[</span><span class="pln">srcOff</span><span class="pun">+</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> wt</span><span class="pun">;</span><span class="pln">
            a </span><span class="pun">+=</span><span class="pln"> src</span><span class="pun">[</span><span class="pln">srcOff</span><span class="pun">+</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> wt</span><span class="pun">;</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
      dst</span><span class="pun">[</span><span class="pln">dstOff</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> r</span><span class="pun">;</span><span class="pln">
      dst</span><span class="pun">[</span><span class="pln">dstOff</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> g</span><span class="pun">;</span><span class="pln">
      dst</span><span class="pun">[</span><span class="pln">dstOff</span><span class="pun">+</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> b</span><span class="pun">;</span><span class="pln">
      dst</span><span class="pun">[</span><span class="pln">dstOff</span><span class="pun">+</span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> a </span><span class="pun">+</span><span class="pln"> alphaFac</span><span class="pun">*(</span><span class="lit">255</span><span class="pun">-</span><span class="pln">a</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> output</span><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></pre>
    <p>
      Here's a 3x3 sharpen filter. See how it focuses the weight on the center pixel.
      To maintain the brightness of the image, the sum of the matrix values should
      be one.
    </p>
<pre>Filters.filterImage(Filters.convolute, image,
  [  0, -1,  0,
    -1,  5, -1,
     0, -1,  0 ]
);
</pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: none;" width="600" height="337"><canvas id="sharpen" width="600" height="337" style="display: inline;"></canvas>
      <button onclick="sharpen()">Restore original image</button>
    </figure>

    <p>
      Here's an another example of a convolution filter, the box blur. The box
      blur outputs the average of the pixel values inside the convolution matrix.
      The way to do that is to create a convolution matrix of size NxN where
      each of the weights is 1 / (NxN). That way each of the pixels inside the
      matrix contributes an equal amount to the output image and the sum of the
      weights is one.
    </p>
<pre>Filters.filterImage(Filters.convolute, image,
  [ 1/9, 1/9, 1/9,
    1/9, 1/9, 1/9,
    1/9, 1/9, 1/9 ]
);
</pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: inline;" width="600" height="337"><canvas id="blurC" width="600" height="337" style="display: none;"></canvas>
      <button onclick="blurC()">Blur the image</button>
    </figure>

    <p>
      We can make more complex image filters by combining existing filters. For
      example, let's write a <a href="http://en.wikipedia.org/wiki/Sobel_filter">Sobel filter</a>. A Sobel filter computes the vertical
      and horizontal gradients of the image and combines the computed images to
      find edges in the image.
      The way we implement the Sobel filter here is by first grayscaling the image,
      then taking the horizontal and vertical gradients and finally
      combining the gradient images to make up the final image.
    </p>
    <p>
      Regarding terminology, "gradient" here means the change
      in pixel value at an image position. If a pixel has a left neighbour with
      value 20 and a right neighbour with value 50, the horizontal gradient at
      the pixel would be 30. The vertical gradient has the same idea but
      uses the above and below neighbours.
    </p>
<pre>var grayscale = Filters.filterImage(Filter.grayscale, image);
// Note that ImageData values are clamped between 0 and 255, so we need
// to use a Float32Array for the gradient values because they
// range between -255 and 255.
var vertical = Filters.convoluteFloat32(grayscale,
  [ -1, 0, 1,
    -2, 0, 2,
    -1, 0, 1 ]);
var horizontal = Filters.convoluteFloat32(grayscale,
  [ -1, -2, -1,
     0,  0,  0,
     1,  2,  1 ]);
var final_image = Filters.createImageData(vertical.width, vertical.height);
for (var i=0; i&lt;final_image.data.length; i+=4) {
  // make the vertical gradient red
  var v = Math.abs(vertical.data[i]);
  final_image.data[i] = v;
  // make the horizontal gradient green
  var h = Math.abs(horizontal.data[i]);
  final_image.data[i+1] = h;
  // and mix in some blue for aesthetics
  final_image.data[i+2] = (v+h)/4;
  final_image.data[i+3] = 255; // opaque alpha
}
</pre>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: inline;" width="600" height="337"><canvas id="sobel" width="600" height="337" style="display: none;"></canvas>
      <button onclick="sobel()">Run a Sobel filter on the image</button>
    </figure>

    <p>
      To cap off our journey into convolution, here's a little toy for you to play with:
      A custom 3x3 convolution filter! Yay!
    </p>
    <figure>
      <img id="orig" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/demo_small.png" style="display: none;" width="600" height="337"><canvas id="custom" width="600" height="337" style="display: inline;"></canvas>
      <div id="customMatrix">
          <input value="1" size="3" type="text">
          <input value="1" size="3" type="text">
          <input value="1" size="3" type="text">
          <br>
          <input value="+1" size="3" type="text">
          <input value="0.7" size="3" type="text">
          <input value="-1" size="3" type="text">
          <br>
          <input value="-1" size="3" type="text">
          <input value="-1" size="3" type="text">
          <input value="-1" size="3" type="text">
          <br>
      </div>
      <button onclick="custom()">Restore original image</button>
    </figure>

    <p>
      And there's a whole bunch of other cool convolution filters out there
      just waiting for you to discover them.
      For instance, try implementing a <a href="http://en.wikipedia.org/wiki/Discrete_Laplace_operator#Implementation_in_Image_Processing">Laplace filter</a>
      in the convolution toy above and see what it does.
    </p>

  </section>
  <section>

    <h2 id="toc-conclusion">Conclusion</h2>

    <p>
      I hope this small article was useful in introducing the basic concepts
      of writing image filters in JavaScript using the HTML canvas tag. I
      encourage you to go and implement some more image filters, it's quite
      fun!
    </p>

    <p>
      If you need better performance from your filters, you can usually
      port them to use WebGL fragment shaders to do the image processing.
      With shaders, you can run most simple filters in realtime, which allows
      you to use them for post-processing video and animations.
    </p>

  </section>


  <script type="text/javascript">
        Filters = {};
        Filters.getPixels = function(img) {
          var c,ctx;
          if (img.getContext) {
            c = img;
            try { ctx = c.getContext('2d'); } catch(e) {}
          }
          if (!ctx) {
            c = this.getCanvas(img.width, img.height);
            ctx = c.getContext('2d');
            ctx.drawImage(img, 0, 0);
          }
          return ctx.getImageData(0,0,c.width,c.height);
        };

        Filters.getCanvas = function(w,h) {
          var c = document.createElement('canvas');
          c.width = w;
          c.height = h;
          return c;
        };

        Filters.filterImage = function(filter, image, var_args) {
          var args = [this.getPixels(image)];
          for (var i=2; i<arguments.length; i++) {
            args.push(arguments[i]);
          }
          return filter.apply(null, args);
        };

        Filters.grayscale = function(pixels, args) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            var r = d[i];
            var g = d[i+1];
            var b = d[i+2];
            // CIE luminance for the RGB
            var v = 0.2126*r + 0.7152*g + 0.0722*b;
            d[i] = d[i+1] = d[i+2] = v
          }
          return pixels;
        };

        Filters.brightness = function(pixels, adjustment) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            d[i] += adjustment;
            d[i+1] += adjustment;
            d[i+2] += adjustment;
          }
          return pixels;
        };

        Filters.threshold = function(pixels, threshold) {
          var d = pixels.data;
          for (var i=0; i<d.length; i+=4) {
            var r = d[i];
            var g = d[i+1];
            var b = d[i+2];
            var v = (0.2126*r + 0.7152*g + 0.0722*b >= threshold) ? 255 : 0;
            d[i] = d[i+1] = d[i+2] = v
          }
          return pixels;
        };

        Filters.tmpCanvas = document.createElement('canvas');
        Filters.tmpCtx = Filters.tmpCanvas.getContext('2d');

        Filters.createImageData = function(w,h) {
          return this.tmpCtx.createImageData(w,h);
        };

        Filters.convolute = function(pixels, weights, opaque) {
          var side = Math.round(Math.sqrt(weights.length));
          var halfSide = Math.floor(side/2);

          var src = pixels.data;
          var sw = pixels.width;
          var sh = pixels.height;

          var w = sw;
          var h = sh;
          var output = Filters.createImageData(w, h);
          var dst = output.data;

          var alphaFac = opaque ? 1 : 0;

          for (var y=0; y<h; y++) {
            for (var x=0; x<w; x++) {
              var sy = y;
              var sx = x;
              var dstOff = (y*w+x)*4;
              var r=0, g=0, b=0, a=0;
              for (var cy=0; cy<side; cy++) {
                for (var cx=0; cx<side; cx++) {
                  var scy = Math.min(sh-1, Math.max(0, sy + cy - halfSide));
                  var scx = Math.min(sw-1, Math.max(0, sx + cx - halfSide));
                  var srcOff = (scy*sw+scx)*4;
                  var wt = weights[cy*side+cx];
                  r += src[srcOff] * wt;
                  g += src[srcOff+1] * wt;
                  b += src[srcOff+2] * wt;
                  a += src[srcOff+3] * wt;
                }
              }
              dst[dstOff] = r;
              dst[dstOff+1] = g;
              dst[dstOff+2] = b;
              dst[dstOff+3] = a + alphaFac*(255-a);
            }
          }
          return output;
        };

        if (!window.Float32Array)
          Float32Array = Array;

        Filters.convoluteFloat32 = function(pixels, weights, opaque) {
          var side = Math.round(Math.sqrt(weights.length));
          var halfSide = Math.floor(side/2);

          var src = pixels.data;
          var sw = pixels.width;
          var sh = pixels.height;

          var w = sw;
          var h = sh;
          var output = {
            width: w, height: h, data: new Float32Array(w*h*4)
          };
          var dst = output.data;

          var alphaFac = opaque ? 1 : 0;

          for (var y=0; y<h; y++) {
            for (var x=0; x<w; x++) {
              var sy = y;
              var sx = x;
              var dstOff = (y*w+x)*4;
              var r=0, g=0, b=0, a=0;
              for (var cy=0; cy<side; cy++) {
                for (var cx=0; cx<side; cx++) {
                  var scy = Math.min(sh-1, Math.max(0, sy + cy - halfSide));
                  var scx = Math.min(sw-1, Math.max(0, sx + cx - halfSide));
                  var srcOff = (scy*sw+scx)*4;
                  var wt = weights[cy*side+cx];
                  r += src[srcOff] * wt;
                  g += src[srcOff+1] * wt;
                  b += src[srcOff+2] * wt;
                  a += src[srcOff+3] * wt;
                }
              }
              dst[dstOff] = r;
              dst[dstOff+1] = g;
              dst[dstOff+2] = b;
              dst[dstOff+3] = a + alphaFac*(255-a);
            }
          }
          return output;
        };
  </script>
  <script>
    var img = document.getElementById('orig');
    img.addEventListener('load', function() {

      var canvases = document.getElementsByTagName('canvas');
      for (var i=0; i<canvases.length; i++) {
        var c = canvases[i];
        c.parentNode.insertBefore(img.cloneNode(true), c);
        c.style.display = 'none';
      }

      function runFilter(id, filter, arg1, arg2, arg3) {
        var c = document.getElementById(id);
        var s = c.previousSibling.style;
        var b = c.parentNode.getElementsByTagName('button')[0];
        if (b.originalText == null) {
          b.originalText = b.textContent;
        }
        if (s.display == 'none') {
          s.display = 'inline';
          c.style.display = 'none';
          b.textContent = b.originalText;
        } else {
          var idata = Filters.filterImage(filter, img, arg1, arg2, arg3);
          c.width = idata.width;
          c.height = idata.height;
          var ctx = c.getContext('2d');
          ctx.putImageData(idata, 0, 0);
          s.display = 'none';
          c.style.display = 'inline';
          b.textContent = 'Restore original image';
        }
      }

      grayscale = function() {
        runFilter('grayscale', Filters.grayscale);
      }

      brightness = function() {
        runFilter('brightness', Filters.brightness, 40);
      }

      threshold = function() {
        runFilter('threshold', Filters.threshold, 128);
      }

      sharpen = function() {
        runFilter('sharpen', Filters.convolute,
          [ 0, -1,  0,
           -1,  5, -1,
            0, -1,  0]);
      }

      blurC = function() {
        runFilter('blurC', Filters.convolute,
          [ 1/9, 1/9, 1/9,
            1/9, 1/9, 1/9,
            1/9, 1/9, 1/9 ]);
      }

      sobel = function() {
        runFilter('sobel', function(px) {
          px = Filters.grayscale(px);
          var vertical = Filters.convoluteFloat32(px,
            [-1,-2,-1,
              0, 0, 0,
              1, 2, 1]);
          var horizontal = Filters.convoluteFloat32(px,
            [-1,0,1,
             -2,0,2,
             -1,0,1]);
          var id = Filters.createImageData(vertical.width, vertical.height);
          for (var i=0; i<id.data.length; i+=4) {
            var v = Math.abs(vertical.data[i]);
            id.data[i] = v;
            var h = Math.abs(horizontal.data[i]);
            id.data[i+1] = h
            id.data[i+2] = (v+h)/4;
            id.data[i+3] = 255;
          }
          return id;
        });
      }

      custom = function() {
        var inputs = document.getElementById('customMatrix').getElementsByTagName('input');
        var arr = [];
        for (var i=0; i<inputs.length; i++) {
          arr.push(parseFloat(inputs[i].value));
        }
        runFilter('custom', Filters.convolute, arr, true);
      }

    }, false);
  </script>

      </div>
    </section>
  </article>

  
  <section class="disqus pattern-bg-lighter">

    <div id="disqus" class="container">

      <h2>Comments</h2>

      <div id="disqus_thread">

        <a href="#disqus_thread" class="load-comments" data-disqus-identifier="https://www.html5rocks.com/tutorials/canvas/imagefilters/">4</a>

      </div>
    </div>

    <noscript>
      <p class="center">
        <strong>
          <a href="https://disqus.com/?ref_noscript">Please enable JavaScript to view the comments powered by Disqus.</a>
        </strong>
      </p>
    </noscript>

    <script>

      var disqus_shortname = 'html5rocks';
      var disqus_identifier = 'https://www.html5rocks.com/tutorials/canvas/imagefilters/';
      var disqus_url = 'https://www.html5rocks.com/tutorials/canvas/imagefilters/';
      var disqus_developer = 0;

      var disqus_config = function () {
        var funky_language_code_mapping = {
          'de': 'de_inf',
          'es': 'es_ES',
          'pt': 'pt_EU',
          'sr': 'sr_CYRL',
          'sv': 'sv_SE',
          'zh': 'zh_HANT'
        };
        this.language = funky_language_code_mapping['en'] ||
                        'en';

        this.callbacks.onReady = [ function () {
                                      try {
                                        ga('send', 'event', 'View comments');
                                      } catch(err){}
                                   } ];
        this.callbacks.onNewComment = [ function (comment) {
                                          try {
                                            ga('send', 'event', 'Commented');
                                          } catch(err){}
                                        } ];
      };

      window.addEventListener('load', function(e) {

        var c = document.createElement('script');
        c.type = 'text/javascript';
        c.src = 'https://' + disqus_shortname + '.disqus.com/count.js';
        c.async = true;

        var s = document.getElementsByTagName('script')[0], sp = s.parentNode;
        sp.insertBefore(c, s);

        if (window.location.hash === '#disqus_thread')
          loadComments();

      }, false);

      var disqus_loaded = false;
      function loadComments() {

        if (disqus_loaded)
          return;

        disqus_loaded = true;

        ga('send', 'event', 'Interactions', 'Comments', 'Comments Loaded');

        var s = document.getElementsByTagName('script')[0], sp = s.parentNode;
        var dsq = document.createElement('script');
        dsq.type = 'text/javascript';
        dsq.async = true;

        var disqusContainer = document.getElementById('disqus');
        disqusContainer.classList.add('active');

        dsq.src = 'https://' + disqus_shortname + '.disqus.com/embed.js';
        sp.insertBefore(dsq, s);
      }

      function outgoing(url) {
        try {
          ga('send', 'event', 'Outbound Links' , url);
        } catch(err){}
      }
      // Open external links (also that don't have a target defined) in a new tab.
      var externLinks = document.querySelectorAll('article.tutorial a[href^="http"]:not([target])');
      for(var i = 0, a; a = externLinks[i]; ++i) {
        a.target = '_blank';
        a.addEventListener('click', new Function('outgoing(' + '"' + a.href.replace(/.*?:\/\//g, "") + '"' + ');'));
      }

      var loadCommentsButtons = document.querySelectorAll('.load-comments');
      for(var l = 0; l < loadCommentsButtons.length; l++)
        loadCommentsButtons[l].addEventListener('click', loadComments);

    </script>
  </section>
  

  <footer>
    <div class="container">

      
        <h1>Next steps</h1>

        

        <aside class="panel share">
          <h2>Share</h2>
          <style>
            aside.share.native .android { display: inline-block !important;
            background-image: url(https://storage.googleapis.com/material-icons/external-assets/v4/icons/svg/ic_share_white_36px.svg) !important;
            background-size: 48px 48px !important;
             background-position: 0, 0 !important; }
          </style>
          <a href="https://twitter.com/share?url=https://www.html5rocks.com/tutorials/canvas/imagefilters/&amp;text=Image%20Filters%20with%20Canvas&amp;lang=en&amp;via=ChromiumDev&amp;related=ChromiumDev" class="android" style="display: none;">Share</a>
          <a href="https://twitter.com/share?url=https://www.html5rocks.com/tutorials/canvas/imagefilters/&amp;text=Image%20Filters%20with%20Canvas&amp;lang=en&amp;via=ChromiumDev&amp;related=ChromiumDev" class="twitter" target="_blank">Twitter</a>
          <a href="https://www.facebook.com/sharer/sharer.php?u=https://www.html5rocks.com/tutorials/canvas/imagefilters/" class="facebook" target="_blank">Facebook</a>
          <a href="https://plus.google.com/share?url=https://www.html5rocks.com/tutorials/canvas/imagefilters/" class="gplus" onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;">Google+</a>
        </aside>

        <aside class="panel rss">
          <h2>Subscribe</h2>
          <p>Enjoyed this article? Grab the <a href="http://feeds.feedburner.com/html5rocks">RSS feed</a> and stay up-to-date.</p>
        </aside>

      

      <p class="licensing">
      
        Except as otherwise <a href="http://code.google.com/policies.html#restrictions">noted</a>, the content of this page is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a>, and code samples are licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>.
      
      </p>

    </div>
  </footer>

  <script>
    window.isCompatible = function() {
      
  return !!Modernizr.canvas

    };
    
    if(navigator.share !== undefined) {
    document.addEventListener('DOMContentLoaded', e => {
      var shareBox = document.querySelector('aside.share');
      if(shareBox !== undefined) { shareBox.classList.toggle('native'); }
      
      var shareBtn = document.querySelector('aside.share a.android');
      shareBtn.addEventListener('click', clickEvent => {
        clickEvent.preventDefault();
        const title = "Image Filters with Canvas";
        const url = "https://www.html5rocks.com/tutorials/canvas/imagefilters/";
        navigator.share({title: title, text: url, url: url})
          .then(() => console.log('Successful share'),
           error => console.log('Error sharing:', error));
      });
    });
}

    if (isCompatible() === false) {
      document.getElementById('notcompatible').className = '';
    }

    function _prettyPrint() {
      if (typeof customPrettyPrintLanguage != 'undefined') {
        customPrettyPrintLanguage();
      }
      prettyPrint();
    }
  </script>
  <script async="" src="Making%20Image%20Filters%20with%20Canvas%20-%20HTML5%20Rocks_files/prettify.js" onload="_prettyPrint()"></script>
  <!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-XXXX"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MB3LRF');</script>
<!-- End Google Tag Manager -->


  </div>

  <script>
  (function() {

    // Kill feedburner and marketing tracking arguments, but let them register
    // before we do it.
    setTimeout(function() {
      if (/^\?utm_/.test(document.location.search) &&
          window.history.replaceState) {
        window.history.replaceState(
            {}, '', document.location.href.replace(/\?utm_.*/, ''));
      }
    }, 2000);

    var siteHeader = document.getElementById('siteheader');
    var navToggle = document.getElementById('navtoggle');
    var siteNav = document.getElementById('sitenav');

    function toggle(target, forceActive) {

      if (typeof toc !== 'undefined') {
        // Switch off whichever one is not the
        // current target
        if (target === toc)
          siteNav.classList.remove('active');
        else
          toc.classList.remove('active');
      }

      // Toggle if no force parameter is set
      if (typeof forceActive === 'undefined') {
        target.classList.toggle('active');
      } else {
        if (forceActive)
          target.classList.add('active');
        else
          target.classList.remove('active');
      }

      // now find out what the set state ended up being
      var isActive = target.classList.contains('active');

      if (isActive)
        siteHeader.classList.add('expanded');
      else
        siteHeader.classList.remove('expanded');

    }

    navToggle.addEventListener('click', function(e) {
      toggle(siteNav);
      e.preventDefault();
    });

    

    var tocToggle = document.getElementById('toctoggle');
    var toc = document.getElementById('toc');
    var articleMeta = document.getElementById('article-meta');
    var articleContent = document.getElementById('article-content');
    var articleMetaHeight = 0;
    var articleMetaMaxY = 0;
    var articleMetaMinY = 0;
    var articleContentPadding = 200;

    var tocLinks = document.querySelectorAll('.toc a');
    for (var t = 0; t < tocLinks.length; t++)
      tocLinks[t].addEventListener('click', onTocLinkClick);

    tocToggle.addEventListener('click', function(e) {
      toggle(toc);
      e.preventDefault();
    });

    toc.addEventListener('click', function(e) {
      if (e.target !== siteNav)
        toggle(toc, false);
    });

    function onTocLinkClick() {
      ga('send', 'event', 'Interactions', 'TOC', 'TOC Clicked');
    }

    function setMinScrollYFromMetaY() {
      var scrollPosition = window.scrollY;

      var articleMetaBounds = articleMeta.getBoundingClientRect();
      var articleMetaTop = Math.max(352,
          articleMetaBounds.top - 20 + scrollPosition);

      articleMetaHeight = articleMetaBounds.bottom - articleMetaBounds.top;
      articleMetaMinY = articleMetaTop;
    }

    function setMaxScrollYFromContentHeight() {

      var scrollPosition = window.scrollY;

      var articleContentBounds = articleContent.getBoundingClientRect();
      var articleContentTop = articleContentBounds.top + scrollPosition;
      var articleContentHeight = articleContentBounds.bottom - articleContentBounds.top;

      articleMetaMaxY = articleContentTop +
          articleContentHeight -
          articleMetaHeight -
          articleContentPadding;

    }

    function onScroll(e) {

      if (window.scrollY >= articleMetaMinY) {

        articleMeta.classList.add('sticky');

        var articleMetaTop = 22 - Math.max(0, window.scrollY - articleMetaMaxY);
        articleMeta.style.top = articleMetaTop + 'px';

      } else {
        articleMeta.classList.remove('sticky');
        articleMeta.style.top = 'auto';
      }
    }

    if (articleMeta.getBoundingClientRect) {
      setMinScrollYFromMetaY();
      setMaxScrollYFromContentHeight();
      document.addEventListener('scroll', onScroll);
      window.addEventListener('load', setMaxScrollYFromContentHeight, false);
    }

    
  })();
  </script>
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-15028909-1', 'auto');
  ga('create', 'UA-49880327-4', 'auto', {'name': 'html5rocks'});

  ga('send', 'pageview');
  ga('html5rocks.send', 'pageview');

  </script>
   <!-- Google Tag Manager -->
<noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-XXXX"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MB3LRF');</script>
<!-- End Google Tag Manager -->


</body></html>